
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.StationConfigScalarFieldEnum = {
  id: 'id',
  stationId: 'stationId',
  stationName: 'stationName',
  governorate: 'governorate',
  delegation: 'delegation',
  address: 'address',
  openingTime: 'openingTime',
  closingTime: 'closingTime',
  isOperational: 'isOperational',
  serverVersion: 'serverVersion',
  lastSync: 'lastSync',
  isOnline: 'isOnline',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StaffScalarFieldEnum = {
  id: 'id',
  cin: 'cin',
  phoneNumber: 'phoneNumber',
  firstName: 'firstName',
  lastName: 'lastName',
  role: 'role',
  isActive: 'isActive',
  lastLogin: 'lastLogin',
  syncedAt: 'syncedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  staffId: 'staffId',
  token: 'token',
  staffData: 'staffData',
  isActive: 'isActive',
  lastActivity: 'lastActivity',
  expiresAt: 'expiresAt',
  createdOffline: 'createdOffline',
  lastOfflineAt: 'lastOfflineAt',
  createdAt: 'createdAt'
};

exports.Prisma.DriverScalarFieldEnum = {
  id: 'id',
  cin: 'cin',
  phoneNumber: 'phoneNumber',
  firstName: 'firstName',
  lastName: 'lastName',
  originGovernorateId: 'originGovernorateId',
  originDelegationId: 'originDelegationId',
  originAddress: 'originAddress',
  vehicleId: 'vehicleId',
  accountStatus: 'accountStatus',
  isActive: 'isActive',
  syncedAt: 'syncedAt'
};

exports.Prisma.VehicleScalarFieldEnum = {
  id: 'id',
  licensePlate: 'licensePlate',
  capacity: 'capacity',
  model: 'model',
  year: 'year',
  color: 'color',
  isActive: 'isActive',
  isAvailable: 'isAvailable',
  syncedAt: 'syncedAt'
};

exports.Prisma.VehicleAuthorizedStationScalarFieldEnum = {
  id: 'id',
  vehicleId: 'vehicleId',
  stationId: 'stationId',
  createdAt: 'createdAt',
  syncedAt: 'syncedAt'
};

exports.Prisma.VehicleQueueScalarFieldEnum = {
  id: 'id',
  vehicleId: 'vehicleId',
  destinationId: 'destinationId',
  destinationName: 'destinationName',
  queueType: 'queueType',
  queuePosition: 'queuePosition',
  status: 'status',
  enteredAt: 'enteredAt',
  availableSeats: 'availableSeats',
  totalSeats: 'totalSeats',
  basePrice: 'basePrice',
  estimatedDeparture: 'estimatedDeparture',
  actualDeparture: 'actualDeparture',
  syncedAt: 'syncedAt'
};

exports.Prisma.RouteScalarFieldEnum = {
  id: 'id',
  stationId: 'stationId',
  stationName: 'stationName',
  basePrice: 'basePrice',
  isActive: 'isActive',
  syncedAt: 'syncedAt'
};

exports.Prisma.VehicleScheduleScalarFieldEnum = {
  id: 'id',
  vehicleId: 'vehicleId',
  routeId: 'routeId',
  departureTime: 'departureTime',
  availableSeats: 'availableSeats',
  totalSeats: 'totalSeats',
  status: 'status',
  actualDeparture: 'actualDeparture',
  syncedAt: 'syncedAt'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  queueId: 'queueId',
  seatsBooked: 'seatsBooked',
  totalAmount: 'totalAmount',
  bookingSource: 'bookingSource',
  bookingType: 'bookingType',
  userId: 'userId',
  customerPhone: 'customerPhone',
  onlineTicketId: 'onlineTicketId',
  paymentStatus: 'paymentStatus',
  paymentMethod: 'paymentMethod',
  paymentProcessedAt: 'paymentProcessedAt',
  verificationCode: 'verificationCode',
  isVerified: 'isVerified',
  verifiedAt: 'verifiedAt',
  verifiedById: 'verifiedById',
  createdOffline: 'createdOffline',
  localId: 'localId',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  syncStatus: 'syncStatus'
};

exports.Prisma.SyncQueueScalarFieldEnum = {
  id: 'id',
  tableName: 'tableName',
  recordId: 'recordId',
  operation: 'operation',
  data: 'data',
  syncStatus: 'syncStatus',
  retryCount: 'retryCount',
  error: 'error',
  createdAt: 'createdAt',
  lastAttempt: 'lastAttempt'
};

exports.Prisma.OperationLogScalarFieldEnum = {
  id: 'id',
  staffId: 'staffId',
  operation: 'operation',
  details: 'details',
  success: 'success',
  error: 'error',
  createdAt: 'createdAt'
};

exports.Prisma.OfflineCustomerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  phone: 'phone',
  cin: 'cin',
  createdAt: 'createdAt'
};

exports.Prisma.TripScalarFieldEnum = {
  id: 'id',
  vehicleId: 'vehicleId',
  licensePlate: 'licensePlate',
  destinationId: 'destinationId',
  destinationName: 'destinationName',
  queueId: 'queueId',
  seatsBooked: 'seatsBooked',
  startTime: 'startTime',
  syncStatus: 'syncStatus',
  syncedAt: 'syncedAt',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  StationConfig: 'StationConfig',
  Staff: 'Staff',
  Session: 'Session',
  Driver: 'Driver',
  Vehicle: 'Vehicle',
  VehicleAuthorizedStation: 'VehicleAuthorizedStation',
  VehicleQueue: 'VehicleQueue',
  Route: 'Route',
  VehicleSchedule: 'VehicleSchedule',
  Booking: 'Booking',
  SyncQueue: 'SyncQueue',
  OperationLog: 'OperationLog',
  OfflineCustomer: 'OfflineCustomer',
  Trip: 'Trip'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
